---
name: "Dagger CI/CD Pipeline"
on:
  push:
    branches: [main, terragon/**]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      machine:
        description: 'Specific machine to build (optional)'
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Fast feedback: linting and formatting
  lint:
    name: "üîç Lint & Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v6
        with:
          version: "0.18.16"

      - name: List available machines
        run: dagger call get-machine-list

      - name: Test basic functionality
        run: dagger call hello --name="CI"

  # Parallel testing of all configurations
  test-nixos:
    name: "üêß Test NixOS Configurations"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v6
        with:
          version: "0.18.16"

      - name: List NixOS configurations
        run: dagger call get-machine-list

  test-darwin:
    name: "üçé Test Darwin Configurations"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v6
        with:
          version: "0.18.16"

      - name: List Darwin configurations
        run: dagger call hello --name="Darwin"

  # Security and compliance checks
  security:
    name: "üîê Security & Compliance"
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v6
        with:
          version: "0.18.16"

      - name: Security check placeholder
        run: dagger call hello --name="Security"

      - name: Secrets validation placeholder
        run: dagger call hello --name="Secrets"
        continue-on-error: true  # Secrets validation may fail in CI

  # Service configuration testing
  test-services:
    name: "üöÄ Test Service Configurations"
    runs-on: ubuntu-latest
    needs: [test-nixos]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v6
        with:
          version: "0.18.16"

      - name: Service configurations placeholder
        run: dagger call hello --name="Services"

  # Build artifacts on main branch or tags
  build-artifacts:
    name: "üèóÔ∏è Build Release Artifacts"
    runs-on: ubuntu-latest
    needs: [test-nixos, test-darwin, security]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v6
        with:
          version: "0.18.16"

      - name: Build ISO placeholder
        run: |
          dagger call hello --name="ISO Builder"

      # - name: Upload ISO artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: nixos-iso
      #     path: nixos.iso

  # Full pipeline for release builds
  full-pipeline:
    name: "üéØ Full Pipeline"
    runs-on: ubuntu-latest
    needs: [test-nixos, test-darwin, security, test-services]
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v6
        with:
          version: "0.18.16"

      - name: Run complete pipeline placeholder
        run: dagger call hello --name="Pipeline"

  # Single machine build (manual trigger)
  build-single:
    name: "üñ•Ô∏è Build Single Machine"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.machine != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v6
        with:
          version: "0.18.16"

      - name: Build specific machine placeholder
        run: |
          MACHINE="${{ github.event.inputs.machine }}"
          dagger call hello --name="Building $MACHINE"

  # Deploy preview environment (PR only)
  preview:
    name: "üî¨ Deploy Preview"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v6
        with:
          version: "0.18.16"

      - name: Create preview environment
        run: |
          echo "üî¨ Preview environment would be deployed here"
          echo "Machine configurations available:"
          dagger call get-machine-list

      - name: Comment PR with preview info
        uses: actions/github-script@v7
        continue-on-error: true  # Allow this step to fail if no permissions
        with:
          script: |
            try {
              const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üî¨ Dagger CI/CD Pipeline

                ‚úÖ **Preview environment ready!**

                **Available machines for testing:**
                - **NixOS**: workchng, dsk1chng, svr1chng, svr2chng, svr3chng, noir, zinc, vmnixos
                - **Darwin**: mair, mac1chng

                **Test commands you can run locally:**
                \`\`\`bash
                # List all available machines
                dagger call get-machine-list

                # Test basic functionality
                dagger call hello --name="YourName"
                \`\`\`

                **üîó [View full pipeline results](${runUrl})**

                ---
                *This comment is automatically updated by the Dagger CI/CD pipeline*`
              });
            } catch (error) {
              console.log("Could not comment on PR (likely permissions issue):", error.message);
            }

  # Comment on failures 
  comment-on-failure:
    name: "üí¨ Comment on Failure"
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'pull_request'
    needs: [lint, test-nixos, test-darwin, security, test-services]
    steps:
      - name: Comment on failed PR
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            try {
              const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ‚ùå Dagger CI/CD Pipeline Failed

                Some checks failed in this PR. Please review the errors and push fixes.

                **üîó [View detailed failure logs](${runUrl})**

                **Common issues to check:**
                - Dagger module compilation errors
                - Workflow syntax problems  
                - Missing dependencies or tools
                - Permission or configuration issues

                ---
                *This comment is automatically posted when CI/CD pipeline fails*`
              });
            } catch (error) {
              console.log("Could not comment on PR (likely permissions issue):", error.message);
            }